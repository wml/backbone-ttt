    <% cell_size = 125 %>
    <% grid_size = 3 * cell_size %>
    <% mini_cell_size = 75 %>
    <% mini_grid_size = 3 * 75 %>

    <!-- TODO
      set overflow attr on history after enough added
      bug: frontend does not handle "tie" condition, requesting another move after move 9 and causing a JS bug
      status in DB: 3 should be draw
    -->

    <script type="text/javascript">      
      var UI = {
        mainCellSize: <%= cell_size %>,
        lastMoveDrawn: -1,

        getMainContext: function() {
          return $('#board')[0].getContext("2d");
        },

        eachRow: function(callback) {
          for (var row = 0; row < 3; ++row) {
            for (var col = 0; col < 3; ++col) {
              callback(row, col);			    
            }
          }
        },

        draw: function(state, winner) {
          this.drawState(this.getMainContext(), 0, 0, UI.mainCellSize, state, winner);
        },

        drawState: function(ctx, x, y, cellsize, state, winner) {
          var s = cellsize;
          var ximg = $('#x-img')[0];
          var oimg = $('#o-img')[0];

          UI.eachRow(function(row, col) {
            var left = x + s * col;
            var top = y + s * row;

            ctx.beginPath();
            ctx.rect(left, top, s, s);
            ctx.fillStyle = "#e8e8e8";
            ctx.fill();
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#666666";
            ctx.stroke();

            if (Game.States.Human == state[row][col]) {
              ctx.drawImage(ximg, left, top);
            }
            else if (Game.States.Opponent == state[row][col]) {
              ctx.drawImage(oimg, left, top);
            }
          });

          if (undefined != winner && null != winner) {
            UI.drawWinner(ctx, winner);
          }
        },

        drawWinner: function(ctx, winner) {
          var s = UI.mainCellSize;
          var color = (Game.States.Human == winner[0] ? '#0F0' : '#F00');

          ctx.beginPath();
          ctx.lineWidth = 10;
          ctx.lineCap = 'round';
          ctx.strokeStyle = color;

          if ('row' == winner[1]) {
            ctx.moveTo(s/4, s/2 + s * winner[2]);
            ctx.lineTo(s * 3 - s / 4, s/2 + s * winner[2]);
          }
          else if ('col' == winner[1]) {
            ctx.moveTo(s/2 + s * winner[2], s/4);
            ctx.lineTo(s/2 + s * winner[2], s * 3 - s / 4);
          }
          else if ('ulbr' == winner[1]) {
            ctx.moveTo(s/4, s/4);
            ctx.lineTo(s * 3 - s / 4, s * 3 - s / 4);
          }
          else {
            ctx.moveTo(s/4, s * 3 - s / 4);
            ctx.lineTo(s * 3 - s / 4, s/4);
          }

          ctx.stroke();
        },

        hitTest: function(e) { 
          return {
            row: Math.floor(e.offsetY / UI.mainCellSize),
            col: Math.floor(e.offsetX / UI.mainCellSize),
          };
        }
      };

      function reset() {
        UI.lastMoveDrawn = -1;

        var game = new Game;
        var canvas = $("#board");

        $("#winner").css("display", "none");
        $("#newgame").css("display", "none");
        $("#instructions").css("display", "block");

        var updateUI = function(winner) {
          UI.draw(JSON.parse(game.get("state")), winner);

          if (undefined != winner && null != winner) {
            $('#winner').text(
              (Game.States.Human == winner[0]) ? "You Win :)" : "You Lose :("
            );
            canvas.unbind('click');
            canvas.css("cursor", "default");

            $("#newgame").css("display", "block");
            $("#winner").css("display", "block");
          }
          else {
            canvas.css("cursor", "pointer");
          }
        };
        
        updateUI();

        canvas.click(function(e) {
          this.style.cursor = "wait";
          $("#instructions").css("display", "none");
          var rowcol = UI.hitTest(e);
          var ai = $('input[name=ai]:checked').val();
          
          if (!game.move(rowcol.row, rowcol.col, ai, updateUI)) {
            canvas.css("cursor", "pointer");
            alert("Bogus move, broski");
          }
        });
      }

      $(document).ready(function() {
        $('#newgame').click(reset);
        reset();
      });
    </script>

    <style>
      body {
        margin: 0;
      }

      div {
        width: 800px;
        margin: 0 auto;
      }

      #board {
        cursor: pointer;
        margin: 0px auto;
        display: block;
      }

      #header {
        width: 100%;
        background-color: #333;
        overflow: hidden;
        color: #fff;
        padding: 30px 0 30px;
      }

      h1 {
        text-align: center;
        font-size: 25px;
      }

      h2 {
        text-align: center;
      }

      h3 {
        margin-bottom10px;
        padding-bottom: 10px;
        border-bottom: 1px solid #ccc;
      }

      img {
        display: none;
      }

      #newgame { 
        cursor: pointer;
        text-decoration: underline;
        color: #44F;
      }

      #game {
        width: 500px;
        overflow: hidden;
        margin: 0;
        float:left;
        margin: 75px 0 40px;
      }

      #sidebar {
        width: 250px;
        height: <%= grid_size %>px;
        float: right;
        overflow: hidden;
        display: inline;
        margin-top: 75px;
        border-left: 1px solid #ccc;
        padding-left: 20px;
      }

      .clear {
        clear: both;
      }

      .notop {
        margin-top: 0px;
      }

      #history {
        overflow-y: hidden;
        width: 250px;
        height: 250px;
      }

    </style>

    <div id="header">
      <div>
	    <h1>Backbone / Rails Tic-Tac-Toe Minimax Machine</h1>
      </div>
    </div>

    <div>
      <div id="game">
        <canvas id="board" width="<%= grid_size %>" height="<%= grid_size %>"></canvas>
      </div>
      <div id="sidebar">
        <h3 class="notop">AI</h3>

        <input type="radio" value="Minimax" name="ai" checked="checked" />
        <label for="Minimax">Minimax</label>

        <input type="radio" value="FirstAvailable" name="ai"/>
        <label for="FirstAvailable">First Open</label>

        <h3>Move History</h3>
        <div id="history"><canvas id="history_canvas" width="<%= mini_grid_size %>" height="<%= 9 * (mini_grid_size + 20) %>"></canvas></div>
      </div>

      <div class="clear"></div>

      <h2 id="winner"></h2>
      <h2 id="instructions">Place an <em>X</em> by clicking the grid to start</h2>
      <h2 id="newgame">Click here to start a new game</h2>
    </div>

    <%= image_tag "x.png", :id => "x-img" %>
    <%= image_tag "o.png", :id => "o-img" %>
